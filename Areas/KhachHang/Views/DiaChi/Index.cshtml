@model Final_VS1.Areas.KhachHang.ViewModels.DiaChiManagementViewModel
@{
    ViewData["Title"] = "Quản lý địa chỉ";
    Layout = "~/Areas/KhachHang/Views/Shared/_Layout_KhachHang.cshtml";
}

<style>
    .main-container {
        max-width: 2300px;
        margin: 0 auto;
        padding: 20px 15px;
    }
    
    .address-management-container {
        background: #f8f9fa;
        min-height: calc(100vh - 200px);
        padding: 20px 0;
    }

    .add-address-btn {
        background: #28a745;
        color: white;
        border: none;
        padding: 0.6rem 1.5rem;
        font-size: 1rem;
        font-weight: 500;
        border-radius: 6px;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        transition: background-color 0.2s ease;
    }

    .add-address-btn:hover {
        background: #218838;
        color: white;
        text-decoration: none;
    }

    .add-address-btn i {
        margin-right: 0.5rem;
    }

    .address-card {
        background: white;
        border-radius: 8px;
        padding: 1.2rem;
        margin-bottom: 1rem;
        border: 1px solid #dee2e6;
        transition: box-shadow 0.2s ease;
        position: relative;
    }

    .address-card:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .address-card.default {
       
        background: #f8fff9;
    }

    [data-bs-theme="dark"] .address-card {
        background: #2d3748;
        border-color: #4a5568;
    }

    [data-bs-theme="dark"] .address-card.default {
        background: #2f4f3f;
        border-color: #28a745;
    }

    .default-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
       
        color: white;
        padding: 0.2rem 0.6rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .address-info {
        margin-bottom: 1rem;
        padding-right: 80px; /* Space for default badge */
    }

    .address-info h5 {
        margin: 0 0 0.5rem 0;
        color: #495057;
        font-weight: 600;
        font-size: 1.1rem;
    }

    .address-detail {
        display: flex;
        align-items: flex-start;
        margin-bottom: 0.4rem;
        color: #6c757d;
        font-size: 0.9rem;
    }

    .address-detail i {
        width: 16px;
        margin-right: 0.6rem;
        color: #6c757d;
        font-size: 0.9rem;
        margin-top: 0.1rem;
        flex-shrink: 0;
    }

    .address-actions {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #e9ecef;
    }

    .btn-action {
        padding: 0.4rem 0.8rem;
        border-radius: 4px;
        font-size: 0.85rem;
        font-weight: 500;
        text-decoration: none;
        transition: background-color 0.2s ease;
        border: none;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
    }

    .btn-action i {
        margin-right: 0.4rem;
        font-size: 0.8rem;
    }

    .btn-default {
        background: #ffc107;
        color: #212529;
    }

    .btn-default:hover {
        background: #e0a800;
        color: #212529;
    }

    .btn-delete {
        background: #dc3545;
        color: white;
    }

    .btn-delete:hover {
        background: #c82333;
        color: white;
    }

    .empty-state {
        text-align: center;
        padding: 2rem 1.5rem;
        background: white;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }

    [data-bs-theme="dark"] .empty-state {
        background: #2d3748;
        border-color: #4a5568;
    }

    .empty-state i {
        font-size: 3rem;
        color: #adb5bd;
        margin-bottom: 1rem;
    }

    .empty-state h3 {
        color: #495057;
        margin-bottom: 0.5rem;
        font-size: 1.3rem;
        font-weight: 600;
    }

    [data-bs-theme="dark"] .empty-state h3 {
        color: #e2e8f0;
    }

    .empty-state p {
        color: #6c757d;
        margin-bottom: 1.5rem;
        font-size: 0.95rem;
    }

    [data-bs-theme="dark"] .empty-state p {
        color: #a0aec0;
    }

    @@media (max-width: 768px) {
        .main-container {
            padding: 1rem 0.5rem;
        }

        .address-card {
            padding: 1rem;
        }

        .address-info {
            padding-right: 60px;
        }

        .address-actions {
            flex-wrap: wrap;
            gap: 0.3rem;
        }

        .btn-action {
            flex: 1;
            justify-content: center;
            min-width: 100px;
            font-size: 0.8rem;
            padding: 0.4rem 0.6rem;
        }

        .default-badge {
            font-size: 0.7rem;
            padding: 0.15rem 0.4rem;
        }
    }

    /* Modal Styles */
    .address-modal .modal-dialog {
        max-width: 500px;
    }

    .address-modal .modal-content {
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }

    [data-bs-theme="dark"] .address-modal .modal-content {
        background: #2d3748;
        border-color: #4a5568;
    }

    .address-modal .modal-header {
        background: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        border-radius: 8px 8px 0 0;
        padding: 1rem 1.5rem;
    }

    [data-bs-theme="dark"] .address-modal .modal-header {
        background: #1a202c;
        border-bottom-color: #4a5568;
    }

    .address-modal .modal-title {
        font-weight: 600;
        font-size: 1.2rem;
        color: #495057;
        display: flex;
        align-items: center;
    }

    .address-modal .modal-title i {
        margin-right: 0.5rem;
        font-size: 1.1rem;
    }

    .address-modal .modal-body {
        padding: 1.5rem;
    }

    .address-modal .form-group {
        margin-bottom: 1.2rem;
    }

    .address-modal .form-label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        font-size: 0.9rem;
    }

    .address-modal .form-label i {
        margin-right: 0.4rem;
        color: #6c757d;
        width: 16px;
        font-size: 0.85rem;
    }

    .address-modal .form-control {
        border-radius: 4px;
        border: 1px solid #ced4da;
        padding: 0.6rem 0.8rem;
        font-size: 0.9rem;
        transition: border-color 0.2s ease;
    }

    .address-modal .form-control:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.1rem rgba(0, 123, 255, 0.25);
    }

    .address-modal .form-check {
        background: #f8f9fa;
        border-radius: 4px;
        padding: 0.8rem;
        border: 1px solid #e9ecef;
        margin-top: 0.5rem;
    }

    .address-modal .form-check:hover {
        background: #e9ecef;
    }

    .address-modal .form-check-input:checked {
        background-color: #28a745;
        border-color: #28a745;
    }

    .address-modal .modal-footer {
        padding: 1rem 1.5rem;
        border-top: 1px solid #dee2e6;
        justify-content: flex-end;
        gap: 0.5rem;
    }

    .modal-btn {
        padding: 0.5rem 1rem;
        border-radius: 4px;
        font-weight: 500;
        transition: background-color 0.2s ease;
        border: none;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        min-width: 80px;
        justify-content: center;
        font-size: 0.9rem;
    }

    .modal-btn i {
        margin-right: 0.4rem;
        font-size: 0.8rem;
    }

    .modal-btn-primary {
        background: #007bff;
        color: white;
    }

    .modal-btn-primary:hover {
        background: #0056b3;
    }

    .modal-btn-secondary {
        background: #6c757d;
        color: white;
    }

    .modal-btn-secondary:hover {
        background: #545b62;
    }

    .modal-btn-danger {
        background: #dc3545;
        color: white;
    }

    .modal-btn-danger:hover {
        background: #c82333;
    }

    .validation-error {
        color: #dc3545;
        font-size: 0.8rem;
        margin-top: 0.2rem;
        display: flex;
        align-items: center;
    }

    .validation-error i {
        margin-right: 0.2rem;
        font-size: 0.75rem;
    }

    .form-control.is-invalid {
        border-color: #dc3545;
    }
</style>

<div class="address-management-container">
    <div class="main-container">
        <div class="row justify-content-center">

            <!-- Main Content -->
            <div class="col-12 col-lg-10 col-xl-8">
                <div class="p-4">
                <div class="card h-100 position-relative">
                    <div class="card-header">
                        <h5 class="card-title mb-0"><i class="fas fa-map-marker-alt me-2"></i>Quản lý địa chỉ</h5>
                    </div>
                    <div class="card-body">
                        @if (TempData["SuccessMessage"] != null)
                        {
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                <i class="fas fa-check-circle me-2"></i>
                                @TempData["SuccessMessage"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }

                        @if (TempData["ErrorMessage"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="fas fa-exclamation-circle me-2"></i>
                                @TempData["ErrorMessage"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }

                        <div class="mb-4">
                            <a href="javascript:void(0)" onclick="openCreateModal()" class="add-address-btn">
                                <i class="fas fa-plus"></i>
                                Thêm địa chỉ mới
                            </a>
                        </div>

                        @if (Model.DiaChiList != null && Model.DiaChiList.Any())
                        {
                            @foreach (var diaChi in Model.DiaChiList)
                            {
                                <div class="address-card @(diaChi.MacDinh == true ? "default" : "")">
                                    @if (diaChi.MacDinh == true)
                                    {
                                        <div style="background: #28a745; border: 2px solid #218838;">
                                            Mặc định
                                        </div>
                                    }

                                    <div class="address-info">
                                        <h5>@(diaChi.HoTenNguoiNhan ?? "Chưa có tên")</h5>
                                        
                                        <div class="address-detail">
                                            <i class="fas fa-phone"></i>
                                            <span>@diaChi.SoDienThoai</span>
                                        </div>
                                        
                                        <div class="address-detail">
                                            <i class="fas fa-map-marker-alt"></i>
                                            <span>@diaChi.DiaChi1</span>
                                        </div>
                                    </div>

                                    <div class="address-actions">
                                        @if (diaChi.MacDinh != true)
                                        {
                                            <button type="button" class="btn-action btn-default" onclick="setDefault(@diaChi.IdDiaChi)">
                                                <i class="fas fa-star"></i>
                                                Mặc định
                                            </button>
                                        }
                                        
                                        <button type="button" class="btn-action btn-delete" onclick="deleteAddress(@diaChi.IdDiaChi)">
                                            <i class="fas fa-trash"></i>
                                            Xóa
                                        </button>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="fas fa-map-marker-alt"></i>
                                <h3>Chưa có địa chỉ nào</h3>
                                <p>Hãy thêm địa chỉ đầu tiên để thuận tiện cho việc đặt hàng.</p>
                                <a href="javascript:void(0)" onclick="openCreateModal()" class="add-address-btn">
                                    <i class="fas fa-plus"></i>
                                    Thêm địa chỉ đầu tiên
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Address Modal -->
<div class="modal fade address-modal" id="createAddressModal" tabindex="-1" aria-labelledby="createAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createAddressModalLabel">
                    <i class="fas fa-plus-circle"></i>
                    Thêm địa chỉ mới
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createAddressForm">
                    @Html.AntiForgeryToken()
                    
                    <div class="form-group">
                        <label class="form-label">
                            <i class="fas fa-user"></i>
                            Họ tên
                        </label>
                        <input type="text" id="createHoTen" name="HoTen" class="form-control" 
                               placeholder="Nhập họ tên người nhận" required />
                        <div class="validation-error" id="createHoTenError" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i>
                            <span></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">
                            <i class="fas fa-phone"></i>
                            Số điện thoại
                        </label>
                        <input type="tel" id="createSoDienThoai" name="SoDienThoai" class="form-control" 
                               placeholder="Nhập số điện thoại" required />
                        <div class="validation-error" id="createSoDienThoaiError" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i>
                            <span></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">
                            <i class="fas fa-map-marker-alt"></i>
                            Địa chỉ
                        </label>
                        <textarea id="createDiaChi1" name="DiaChi1" class="form-control" rows="3" 
                                  placeholder="Nhập địa chỉ chi tiết (số nhà, tên đường, phường/xã, quận/huyện, tỉnh/thành phố)" required></textarea>
                        <div class="validation-error" id="createDiaChi1Error" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i>
                            <span></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="form-check">
                            <input type="checkbox" id="createLaMacDinh" name="LaMacDinh" class="form-check-input" />
                            <label for="createLaMacDinh" class="form-check-label">
                                <i class="fas fa-star"></i>
                                Đặt làm địa chỉ mặc định
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="modal-btn modal-btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i>
                    Hủy bỏ
                </button>
                <button type="button" class="modal-btn modal-btn-primary" onclick="submitCreateForm()">
                    <i class="fas fa-save"></i>
                    Lưu địa chỉ
                </button>
            </div>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()

<script>
// Open Create Modal
function openCreateModal() {
    clearCreateForm();
    const modal = new bootstrap.Modal(document.getElementById('createAddressModal'));
    modal.show();
    
    // Auto focus on first input
    setTimeout(() => {
        document.getElementById('createHoTen').focus();
    }, 300);
}

// Submit Create Form
function submitCreateForm() {
    clearCreateValidation();
    
    const formData = {
        HoTen: document.getElementById('createHoTen').value.trim(),
        SoDienThoai: document.getElementById('createSoDienThoai').value.trim(),
        DiaChi1: document.getElementById('createDiaChi1').value.trim(),
        LaMacDinh: document.getElementById('createLaMacDinh').checked
    };
    
    // Client-side validation
    let hasErrors = false;
    
    if (!formData.HoTen) {
        showCreateError('HoTen', 'Vui lòng nhập họ tên');
        hasErrors = true;
    }
    
    if (!formData.SoDienThoai) {
        showCreateError('SoDienThoai', 'Vui lòng nhập số điện thoại');
        hasErrors = true;
    } else if (!/^[0-9+\-\s()]{10,15}$/.test(formData.SoDienThoai)) {
        showCreateError('SoDienThoai', 'Số điện thoại không hợp lệ');
        hasErrors = true;
    }
    
    if (!formData.DiaChi1) {
        showCreateError('DiaChi1', 'Vui lòng nhập địa chỉ');
        hasErrors = true;
    }
    
    if (hasErrors) return;
    
    // Show loading
    const submitBtn = document.querySelector('#createAddressModal .modal-btn-primary');
    const originalText = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang lưu...';
    
    // Submit to server
    const formDataToSend = new FormData();
    formDataToSend.append('HoTen', formData.HoTen);
    formDataToSend.append('SoDienThoai', formData.SoDienThoai);
    formDataToSend.append('DiaChi1', formData.DiaChi1);
    formDataToSend.append('LaMacDinh', formData.LaMacDinh);
    formDataToSend.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

    fetch('@Url.Action("CreateAjax", "DiaChi", new { area = "KhachHang" })', {
        method: 'POST',
        body: formDataToSend
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            bootstrap.Modal.getInstance(document.getElementById('createAddressModal')).hide();
            location.reload(); // Refresh page to show new address
        } else {
            if (result.errors) {
                Object.keys(result.errors).forEach(field => {
                    showCreateError(field, result.errors[field][0]);
                });
            } else {
                alert(result.message || 'Có lỗi xảy ra khi thêm địa chỉ!');
            }
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Có lỗi xảy ra khi thêm địa chỉ!');
    })
    .finally(() => {
        // Reset button
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
    });
}

// Validation helper functions
function showCreateError(field, message) {
    const input = document.getElementById(`create${field}`);
    const error = document.getElementById(`create${field}Error`);
    
    input.classList.add('is-invalid');
    error.querySelector('span').textContent = message;
    error.style.display = 'flex';
}

function clearCreateValidation() {
    ['HoTen', 'SoDienThoai', 'DiaChi1'].forEach(field => {
        const input = document.getElementById(`create${field}`);
        const error = document.getElementById(`create${field}Error`);
        
        input.classList.remove('is-invalid');
        error.style.display = 'none';
    });
}

function clearCreateForm() {
    document.getElementById('createHoTen').value = '';
    document.getElementById('createSoDienThoai').value = '';
    document.getElementById('createDiaChi1').value = '';
    document.getElementById('createLaMacDinh').checked = false;
    clearCreateValidation();
}

// Toast notification function
function showToast(message, type = 'success') {
    // Remove existing toasts
    const existingToasts = document.querySelectorAll('.custom-toast');
    existingToasts.forEach(toast => toast.remove());

    // Create toast element
    const toast = document.createElement('div');
    toast.className = `custom-toast custom-toast-${type}`;
    toast.innerHTML = `
        <div class="toast-content">
            <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
            <span>${message}</span>
        </div>
        <button type="button" class="toast-close" onclick="this.parentElement.remove()">
            <i class="fas fa-times"></i>
        </button>
    `;

    // Add styles if not exists
    if (!document.getElementById('toast-styles')) {
        const styles = document.createElement('style');
        styles.id = 'toast-styles';
        styles.textContent = `
            .custom-toast {
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                min-width: 300px;
                max-width: 500px;
                padding: 16px;
                border-radius: 8px;
                color: white;
                font-size: 14px;
                font-weight: 500;
                display: flex;
                align-items: center;
                justify-content: space-between;
                animation: slideInRight 0.3s ease-out;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            }
            .custom-toast-success {
                background: linear-gradient(135deg, #28a745, #20c997);
            }
            .custom-toast-error {
                background: linear-gradient(135deg, #dc3545, #e74c3c);
            }
            .toast-content {
                display: flex;
                align-items: center;
                gap: 8px;
                flex: 1;
            }
            .toast-content i {
                font-size: 16px;
            }
            .toast-close {
                background: none;
                border: none;
                color: white;
                cursor: pointer;
                padding: 4px;
                border-radius: 4px;
                opacity: 0.8;
                transition: opacity 0.2s ease;
            }
            .toast-close:hover {
                opacity: 1;
                background: rgba(255,255,255,0.1);
            }
            @@keyframes slideInRight {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
        `;
        document.head.appendChild(styles);
    }

    // Add to page
    document.body.appendChild(toast);

    // Auto remove after 5 seconds
    setTimeout(() => {
        if (toast.parentElement) {
            toast.style.animation = 'slideInRight 0.3s ease-out reverse';
            setTimeout(() => toast.remove(), 300);
        }
    }, 5000);
}
function setDefault(addressId) {
    if (!confirm('Bạn có chắc muốn đặt địa chỉ này làm mặc định?')) {
        return;
    }

    // Show loading state
    const defaultBtn = document.querySelector(`button[onclick="setDefault(${addressId})"]`);
    if (defaultBtn) {
        const originalText = defaultBtn.innerHTML;
        defaultBtn.disabled = true;
        defaultBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang cập nhật...';
        
        // Reset button after timeout to prevent permanent disabled state
        setTimeout(() => {
            defaultBtn.disabled = false;
            defaultBtn.innerHTML = originalText;
        }, 10000); // 10 seconds timeout
    }

    const formData = new FormData();
    formData.append('id', addressId);
    formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

    fetch('@Url.Action("SetDefault", "DiaChi", new { area = "KhachHang" })', {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.json();
    })
    .then(result => {
        if (result.success) {
            // Show success message
            showToast(result.message || 'Đặt làm địa chỉ mặc định thành công!', 'success');
            // Reload page after a short delay to show the toast
            setTimeout(() => {
                location.reload();
            }, 1000);
        } else {
            // Show error message
            showToast(result.message || 'Có lỗi xảy ra!', 'error');
            // Reset button state
            if (defaultBtn) {
                defaultBtn.disabled = false;
                defaultBtn.innerHTML = '<i class="fas fa-star"></i> Mặc định';
            }
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Có lỗi xảy ra khi đặt địa chỉ mặc định: ' + error.message, 'error');
        // Reset button state
        if (defaultBtn) {
            defaultBtn.disabled = false;
            defaultBtn.innerHTML = '<i class="fas fa-star"></i> Mặc định';
        }
    });
}

function deleteAddress(addressId) {
    if (!confirm('Bạn có chắc muốn xóa địa chỉ này? Hành động này không thể hoàn tác.')) {
        return;
    }

    // Show loading state
    const deleteBtn = document.querySelector(`button[onclick="deleteAddress(${addressId})"]`);
    if (deleteBtn) {
        const originalText = deleteBtn.innerHTML;
        deleteBtn.disabled = true;
        deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xóa...';
        
        // Reset button after timeout to prevent permanent disabled state
        setTimeout(() => {
            deleteBtn.disabled = false;
            deleteBtn.innerHTML = originalText;
        }, 10000); // 10 seconds timeout
    }

    const formData = new FormData();
    formData.append('id', addressId);
    formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

    fetch('@Url.Action("Delete", "DiaChi", new { area = "KhachHang" })', {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.json();
    })
    .then(result => {
        if (result.success) {
            // Show success message
            showToast(result.message || 'Xóa địa chỉ thành công!', 'success');
            // Reload page after a short delay to show the toast
            setTimeout(() => {
                location.reload();
            }, 1000);
        } else {
            // Show error message
            showToast(result.message || 'Có lỗi xảy ra khi xóa địa chỉ!', 'error');
            // Reset button state
            if (deleteBtn) {
                deleteBtn.disabled = false;
                deleteBtn.innerHTML = '<i class="fas fa-trash"></i> Xóa';
            }
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Có lỗi xảy ra khi xóa địa chỉ: ' + error.message, 'error');
        // Reset button state
        if (deleteBtn) {
            deleteBtn.disabled = false;
            deleteBtn.innerHTML = '<i class="fas fa-trash"></i> Xóa';
        }
    });
}

// Auto dismiss alerts after 5 seconds
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(function() {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(function(alert) {
            const bsAlert = new bootstrap.Alert(alert);
            bsAlert.close();
        });
    }, 5000);
});
</script>
